# 1章：テストの目的と障壁
## テストを書く目的
- 事業信頼のため
- 安全なコードを維持するため
→リファクタリングを行っても実装済みの機能を逐一テストすることで影響範囲を確認することができる
→積極的なリファクタリングを推し進めることができる
- 実証品質の担保
→テストを書くことでテストが書きずらいコンポーネントを発見できる
→テストが書きづらい＝処理が多すぎるコンポーネント
- テキストドキュメントとしてのテスト
→レビュアーはテストを読むことで仕様を容易に把握することができる

# 2章：テスト手法とテスト戦略
## テストの範囲による分類
- 静的解析
→ TypscriptやESLintによる解析
→ 各モジュール内部の検証、モジュール間連携の不整合を検証

- 単体テスト
→ モジュール単体が提供する機能に着目したテスト
→ 稼働時には滅多に発生しないケース（コーナーケース）の検証に向いている

- 結合テスト
→ ロジックを担う関数〜UIコンポーネント〜APIクライアントまでといった「モジュールを繋げることで提供できる機能」に着目したテスト
→範囲は広いが、相対的にざっくりしたテストになる傾向がある

- E2Eテスト
→全てを通してヘッドレスブラウザ＋UIオートメーションで実施するテスト

## テストの目的による分類
- 機能テスト
→開発対象の機能に不具合がないかを検証
→フロントエンドにおける機能の大部分＝UIコンポーネントの操作(インタラクション)
→本物のブラウザAPIを使用するのが重要なテストのば場合、ヘッドレスブラウザ＋UIオートメーションを使用することが多い
- 非機能テスト
→「アクセシビリティテスト」：特に心身特性に隔たりのないプロダクト化を賢所するのが
- ホワイトボックステスト
- リグレッションテスト：特定時点から前後の差分を検出して、想定外の不具合が発生していないかを検証するテスト

## テスト範囲の深掘り
- 静的解析
→TypeScriptやESLintを導入することで可能

- 単体テスト
→定められた入力値から期待する出力値が得られるかをテストする
→UIコンポーネントで言うと、入力値（＝Props）出力値（＝HTMLのブロック）

→モジュールによっては滅多に派生しないケース（コーナーケース）に限り処理を中断した方がいい場合もある
→こういった点の洗い出しに単体テストは強い

- 結合テスト
```
①セレクトボックスを操作
②URL検索クエリーが変化
③検索クエリの変化によりデータ取得のAPIが叩かれる
④一覧の表示内容が更新
```
①を実行したら④が実行されるのを見るのが結合テスト。
①〜②の範囲のテストも結合テストと言える

- E2Eテスト
→UIテストに加え、外部ストレージやサブシステムを含むテスト（End to End）

## テストの目的の深掘り
- 機能テスト
→フロントエンドにおいてインタラクションテストが機能テストそのものになる

→ブラウザをヘッドレスモードで起動し、UIオートメーションで実施するテストが思い浮かぶが
→Reactなどで実装されたコンポーネントにはブラウザなしでテストできる環境が整っている
（スクロールやセッションストレージが絡む機能など一部ブラウザのみでしかテストできないものもある）

- 非機能テスト(=アクセシビリティテスト)
→「キーボードでチェックボックスをチェックできるか」や「視認性に問題ないコントラスト非になっているか」という検証項目ではそれぞれ的するツールが異なる

- ビジュアルリグレッションテスト
→CSSはコンポーネントに定義されたスタイルだけでなく、ブラウザで読み込まれたCSSからも影響を受ける
→ヘッドレスブラウザに描画された内容をキャプチャ・比較することでリグレッションが発生していないかを検証
→ユーザー操作前後などの比較も可能

## テスト戦略モデル
- アイスクリームコーン型
→アンチパターン
→運用コストが高く、不安定

- テストピラミッド
→下層のテストを多く書くことで、より安定した費用対効果の高いテスト戦略になる
（ブラウザを含む上層のテストは実行時間のコストが高い）

- テスティングトロフィー型
→結合テストに重点を置いた戦略   
→フロントエンドが提供する機能は、ユーザー操作を起点に提供されるため、ユーザー操作を起点とする結合テストにリソースを注ぐことがより良いテスト戦略になるという意図が込められている

# 単体テスト
テストするコード
```
export function add(a: number, b: number) {
  return a + b;
}

export function sub(a: number, b: number) {
  return a - b;
}
```

テストコード
```
import { add, sub } from ".";

describe("四則演算", () => {
  describe("add", () => {
    test("1 + 1 は 2", () => {
      expect(add(1, 1)).toBe(2);
    });
    test("1 + 2 は 3", () => {
      expect(add(1, 2)).toBe(3);
    });
  });
  describe("sub", () => {
    test("1 - 1 は 0", () => {
      expect(sub(1, 1)).toBe(0);
    });
    test("2 - 1 は 1", () => {
      expect(sub(2, 1)).toBe(1);
    });
  });
});

```

テスト関数の引数はテストスタイル（＝タイトル）とテスト関数の二つ
```
test(テストスタイル, テスト関数);
```

第二引数のテスト関数には「アサーション」（検証値が期待通りであるという検証）を書く

```
expect(検証値).toBe(期待値);
```
.toBe()のようなものをマッチャーと呼び、この場合は等価比較となる。

## グルーピング
describeを使ってtestをグループ化できる
```
describe("add", () => {
    test("1 + 1 は 2", () => {
      expect(add(1, 1)).toBe(2);
    });
    test("1 + 2 は 3", () => {
      expect(add(1, 2)).toBe(3);
    });
  });
```
ネスト化も可能。

## テストの実行
VS Code拡張機能「Jest Runner」を使うことで、コードファイル上で実行が可能。

## 条件分岐
- プログラムにバグが起因する場合「条件分岐」に起因するのが代表的
→条件分岐に着目してテストを書くことが基本になる

```
export function add(a: number, b: number) {
  const sum = a + b;
  if (sum > 100) {
    return 100;
  }
  return sum;
}
```

```
describe("四則演算", () => {
  describe("add", () => {
    test("返り値は、第一引数と第二引数の「和」である", () => {
      expect(add(50, 50)).toBe(100);
    });
    test("合計の上限は、'100'である", () => {
      expect(add(70, 80)).toBe(100);
    });
  });
```

## 閾値と例外処理
- 例外をスローする実装
add関数に０〜１００までの数値の見受けつけるという仕様を加えたとして
```
export function add(a: number, b: number) {
    if(a<0||a>100){
        throw new Error("入力値は0~100の間で入力してください")
    }

    if(b<0||b>100){
        throw new Error("入力値は0~100の間で入力してください")
    }

  const sum = a + b;
  if (sum > 100) {
    return 100;
  }
  return sum;
}
```
となる。

テストのexpectの引数は値ではなく、例外が発生する関数を与える。
```
expect(例外スローが想定される関数).toThrow();
```

「例外スローが想定される関数」はアロー関数でラップする
```
// 正しくない書き方
expect(add(-1,110).toThrow());

//正しい書き方
expect(()=>add(-10,110) .toThrow());
```

## エラーメッセージによる詳細な検証
```
expect(()=>add(-10,110) .toThrow("入力値は0~100の間で入力してください"));
```
このテストで意図通りエラーメッセージがスローされるかを検証できる。

## 用途別のマッチャー
### 真偽値の検証
.toBeTruthy() 
.toBeFalsy()

null,undefinedも.toBeFalsy()を使えるがより詳細なマッチャーとして
.toBeNull()
.toBeUndefined()
がある。
```
describe("真偽値の検証", () => {
  test("「真の値」の検証", () => {
    expect(1).toBeTruthy();
    expect("1").toBeTruthy();
    expect(true).toBeTruthy();
    expect(0).not.toBeTruthy();
    expect("").not.toBeTruthy();
    expect(false).not.toBeTruthy();
  });
  test("「偽の値」の検証", () => {
    expect(0).toBeFalsy();
    expect("").toBeFalsy();
    expect(false).toBeFalsy();
    expect(1).not.toBeFalsy();
    expect("1").not.toBeFalsy();
    expect(true).not.toBeFalsy();
  });
  test("「null, undefined」の検証", () => {
    expect(null).toBeFalsy();
    expect(undefined).toBeFalsy();
    expect(null).toBeNull();
    expect(undefined).toBeUndefined();
    expect(undefined).not.toBeDefined();
  });
});
```

### 数値の検証
=
.toBe()
.toEqual()

>,>=
.toBeGreaterThan()
.toBeGreaterThanOrEqual()

<,<=
.toBeLessThan()
.toBeLessThanOrEqual()

小数の検証（jsでは小数の計算に誤差が生じてしまうため）
.toBeCloseTo()

```
describe("数値の検証", () => {
  const value = 2 + 2;
  test("検証値 は 期待値 と等しい", () => {
    expect(value).toBe(4);
    expect(value).toEqual(4);
  });
  test("検証値 は 期待値 より大きい", () => {
    expect(value).toBeGreaterThan(3); // 4 > 3
    expect(value).toBeGreaterThanOrEqual(4); // 4 >= 4
  });
  test("検証値 は 期待値 より小さい", () => {
    expect(value).toBeLessThan(5); // 4 < 5
    expect(value).toBeLessThanOrEqual(4); // 4 <= 4
  });
  test("小数計算は正確ではない", () => {
    expect(0.1 + 0.2).not.toBe(0.3);
  });
  test("小数計算の指定桁までを比較する", () => {
    expect(0.1 + 0.2).toBeCloseTo(0.3); // デフォルトは 2桁
    expect(0.1 + 0.2).toBeCloseTo(0.3, 15); //15桁までを検証
    expect(0.1 + 0.2).not.toBeCloseTo(0.3, 16);
  });
});
```

### 文字列の検証
=
.toBe()
.toEqual()

文字数
.toHaveLength()
.not.toHaveLength()

文字列を含む
.toContain()
.not.toContain()

正規表現を含む
.toMatch(/世界/)
.not.toMatch(/さようなら/)

オブジェクトのプロパティに含む
.stringContaining("世界")
.stringMatching(/世界/)

```
describe("文字列の検証", () => {
  const str = "こんにちは世界";
  const obj = { status: 200, message: str };
  test("検証値 は 期待値 と等しい", () => {
    expect(str).toBe("こんにちは世界");
    expect(str).toEqual("こんにちは世界");
  });
  test("toHaveLength", () => {
    expect(str).toHaveLength(7);
    expect(str).not.toHaveLength(8);
  });
  test("toContain", () => {
    expect(str).toContain("世界");
    expect(str).not.toContain("さようなら");
  });
  test("toMatch", () => {
    expect(str).toMatch(/世界/);
    expect(str).not.toMatch(/さようなら/);
  });
  test("stringContaining", () => {
    expect(obj).toEqual({
      status: 200,
      message: expect.stringContaining("世界"),
    });
  });
  test("stringMatching", () => {
    expect(obj).toEqual({
      status: 200,
      message: expect.stringMatching(/世界/),
    });
  });
});
```

### 配列の検証
含む
.toContain("Jest")

要素数
.toHaveLength(5)

要素が含まれている
.toContainEqual(article1)

要素が全て含まれている
.arrayContaining([article1, article3])

```
describe("配列の検証", () => {
  describe("プリミティブ配列", () => {
    const tags = ["Jest", "Storybook", "Playwright", "React", "Next.js"];
    test("toContain", () => {
      expect(tags).toContain("Jest");
      expect(tags).toHaveLength(5);
    });
  });
  describe("オブジェクト配列", () => {
    const article1 = { author: "taro", title: "Testing Next.js" };
    const article2 = { author: "jiro", title: "Storybook play function" };
    const article3 = { author: "hanako", title: "Visual Regression Testing " };
    const articles = [article1, article2, article3];
    test("toContainEqual", () => {
      expect(articles).toContainEqual(article1);
    });
    test("arrayContaining", () => {
      expect(articles).toEqual(expect.arrayContaining([article1, article3]));
    });
  });
});
```

### オブジェクトの検証
部分一致
.toMatchObject({ name: "taroyamada" })
.not.toMatchObject({ gender: "man" })

プロパティが存在するか
.toHaveProperty("name")

オブジェクトにオブジェクトが含まれるか
.objectContaining({ name: "taroyamada" })
.not.objectContaining({ gender: "man" })

```
describe("オブジェクトの検証", () => {
  const author = { name: "taroyamada", age: 38 };
  const article = {
    title: "Testing with Jest",
    author,
  };
  test("toMatchObject", () => {
    expect(author).toMatchObject({ name: "taroyamada", age: 38 });
    expect(author).toMatchObject({ name: "taroyamada" });
    expect(author).not.toMatchObject({ gender: "man" });
  });
  test("toHaveProperty", () => {
    expect(author).toHaveProperty("name");
    expect(author).toHaveProperty("age");
  });
  test("objectContaining", () => {
    expect(article).toEqual({
      title: "Testing with Jest",
      author: expect.objectContaining({ name: "taroyamada" }),
    });
    expect(article).toEqual({
      title: "Testing with Jest",
      author: expect.not.objectContaining({ gender: "man" }),
    });
  });
});
```

### 非同期処理のテスト
テスト対象
```
export function wait(duration: number) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(duration);
    }, duration);
  });
}

export function timeout(duration: number) {
  return new Promise((_, reject) => {
    setTimeout(() => {
      reject(duration);
    }, duration);
  });
}
```

- thenに渡す関数内でアサーションを書く
→Promiseが解決するまでテストの判定を待つ

```
test("指定時間待つと、経過時間をもって resolve される", () => {
    return wait(50).then((duration) => {
    expect(duration).toBe(50);
    });
});
```

- resolvesした際の値を検証
```
test("指定時間待つと、経過時間をもって resolve される", () => {
    return expect(wait(50)).resolves.toBe(50);
});
```

- async/awaitを使う
```
test("指定時間待つと、経過時間をもって resolve される", async () => {
    await expect(wait(50)).resolves.toBe(50);
});
test("指定時間待つと、経過時間をもって resolve される", async () => {
    expect(await wait(50)).toBe(50);
});
```

- rejectを検証
```
test("指定時間待つと、経過時間をもって reject される", () => {
    return timeout(50).catch((duration) => {
    expect(duration).toBe(50);
    });
});
```

```
test("指定時間待つと、経過時間をもって reject される", () => {
    return expect(timeout(50)).rejects.toBe(50);
});

test("指定時間待つと、経過時間をもって reject される", async () => {
    await expect(timeout(50)).rejects.toBe(50);
});
```

```
test("指定時間待つと、経過時間をもって reject される", async () => {
  try {
    await timeout(50); 
  } catch (err) {
    expect(err).toBe(50);
  }
});
```

- 期待通りのテストコードであることを確認する
以下のコードはテストする関数を間違ったため、アサーションに到達しないまま終了（成功）してしまう。
```
test("指定時間待つと、経過時間をもって reject される", async () => {
  try {
    await await(50); // timeout関数のつもりが、wait関数にしてしまった
    // ここで終了してしまい、テストは成功する
  } catch (err) {
    // アサーションは実行されない
    expect(err).toBe(50);
  }
});
```

このようなミスがないようにexpect.assertions()を追記する。
expect.assertions()はアサーションの実行そのものを検証し、引数は実行される回数を渡す。
```
test("指定時間待つと、経過時間をもって reject される", async () => {
  expect.assertions(1);
  try {
    await await(50); 
    // timeout関数のつもりが、wait関数にしてしまった
    // アサーションは実行されないのでテストは失敗
  } catch (err) {
    // アサーションは実行されない
    expect(err).toBe(50);
  }
});
```