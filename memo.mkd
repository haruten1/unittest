# 1章：テストの目的と障壁
## テストを書く目的
- 事業信頼のため
- 安全なコードを維持するため
→リファクタリングを行っても実装済みの機能を逐一テストすることで影響範囲を確認することができる
→積極的なリファクタリングを推し進めることができる
- 実証品質の担保
→テストを書くことでテストが書きずらいコンポーネントを発見できる
→テストが書きづらい＝処理が多すぎるコンポーネント
- テキストドキュメントとしてのテスト
→レビュアーはテストを読むことで仕様を容易に把握することができる

# 2章：テスト手法とテスト戦略
## テストの範囲による分類
- 静的解析
→ TypscriptやESLintによる解析
→ 各モジュール内部の検証、モジュール間連携の不整合を検証

- 単体テスト
→ モジュール単体が提供する機能に着目したテスト
→ 稼働時には滅多に発生しないケース（コーナーケース）の検証に向いている

- 結合テスト
→ ロジックを担う関数〜UIコンポーネント〜APIクライアントまでといった「モジュールを繋げることで提供できる機能」に着目したテスト
→範囲は広いが、相対的にざっくりしたテストになる傾向がある

- E2Eテスト
→全てを通してヘッドレスブラウザ＋UIオートメーションで実施するテスト

## テストの目的による分類
- 機能テスト
→開発対象の機能に不具合がないかを検証
→フロントエンドにおける機能の大部分＝UIコンポーネントの操作(インタラクション)
→本物のブラウザAPIを使用するのが重要なテストのば場合、ヘッドレスブラウザ＋UIオートメーションを使用することが多い
- 非機能テスト
→「アクセシビリティテスト」：特に心身特性に隔たりのないプロダクト化を賢所するのが
- ホワイトボックステスト
- リグレッションテスト：特定時点から前後の差分を検出して、想定外の不具合が発生していないかを検証するテスト

## テスト範囲の深掘り
- 静的解析
→TypeScriptやESLintを導入することで可能

- 単体テスト
→定められた入力値から期待する出力値が得られるかをテストする
→UIコンポーネントで言うと、入力値（＝Props）出力値（＝HTMLのブロック）

→モジュールによっては滅多に派生しないケース（コーナーケース）に限り処理を中断した方がいい場合もある
→こういった点の洗い出しに単体テストは強い

- 結合テスト
```
①セレクトボックスを操作
②URL検索クエリーが変化
③検索クエリの変化によりデータ取得のAPIが叩かれる
④一覧の表示内容が更新
```
①を実行したら④が実行されるのを見るのが結合テスト。
①〜②の範囲のテストも結合テストと言える

- E2Eテスト
→UIテストに加え、外部ストレージやサブシステムを含むテスト（End to End）

## テストの目的の深掘り
- 機能テスト
→フロントエンドにおいてインタラクションテストが機能テストそのものになる

→ブラウザをヘッドレスモードで起動し、UIオートメーションで実施するテストが思い浮かぶが
→Reactなどで実装されたコンポーネントにはブラウザなしでテストできる環境が整っている
（スクロールやセッションストレージが絡む機能など一部ブラウザのみでしかテストできないものもある）

- 非機能テスト(=アクセシビリティテスト)
→「キーボードでチェックボックスをチェックできるか」や「視認性に問題ないコントラスト非になっているか」という検証項目ではそれぞれ的するツールが異なる

- ビジュアルリグレッションテスト
→CSSはコンポーネントに定義されたスタイルだけでなく、ブラウザで読み込まれたCSSからも影響を受ける
→ヘッドレスブラウザに描画された内容をキャプチャ・比較することでリグレッションが発生していないかを検証
→ユーザー操作前後などの比較も可能

## テスト戦略モデル
- アイスクリームコーン型
→アンチパターン
→運用コストが高く、不安定

- テストピラミッド
→下層のテストを多く書くことで、より安定した費用対効果の高いテスト戦略になる
（ブラウザを含む上層のテストは実行時間のコストが高い）

- テスティングトロフィー型
→結合テストに重点を置いた戦略   
→フロントエンドが提供する機能は、ユーザー操作を起点に提供されるため、ユーザー操作を起点とする結合テストにリソースを注ぐことがより良いテスト戦略になるという意図が込められている

# 第3章：単体テスト
テストするコード
```
export function add(a: number, b: number) {
  return a + b;
}

export function sub(a: number, b: number) {
  return a - b;
}
```

テストコード
```
import { add, sub } from ".";

describe("四則演算", () => {
  describe("add", () => {
    test("1 + 1 は 2", () => {
      expect(add(1, 1)).toBe(2);
    });
    test("1 + 2 は 3", () => {
      expect(add(1, 2)).toBe(3);
    });
  });
  describe("sub", () => {
    test("1 - 1 は 0", () => {
      expect(sub(1, 1)).toBe(0);
    });
    test("2 - 1 は 1", () => {
      expect(sub(2, 1)).toBe(1);
    });
  });
});

```

テスト関数の引数はテストスタイル（＝タイトル）とテスト関数の二つ
```
test(テストスタイル, テスト関数);
```

第二引数のテスト関数には「アサーション」（検証値が期待通りであるという検証）を書く

```
expect(検証値).toBe(期待値);
```
.toBe()のようなものをマッチャーと呼び、この場合は等価比較となる。

## グルーピング
describeを使ってtestをグループ化できる
```
describe("add", () => {
    test("1 + 1 は 2", () => {
      expect(add(1, 1)).toBe(2);
    });
    test("1 + 2 は 3", () => {
      expect(add(1, 2)).toBe(3);
    });
  });
```
ネスト化も可能。

## テストの実行
VS Code拡張機能「Jest Runner」を使うことで、コードファイル上で実行が可能。

## 条件分岐
- プログラムにバグが起因する場合「条件分岐」に起因するのが代表的
→条件分岐に着目してテストを書くことが基本になる

```
export function add(a: number, b: number) {
  const sum = a + b;
  if (sum > 100) {
    return 100;
  }
  return sum;
}
```

```
describe("四則演算", () => {
  describe("add", () => {
    test("返り値は、第一引数と第二引数の「和」である", () => {
      expect(add(50, 50)).toBe(100);
    });
    test("合計の上限は、'100'である", () => {
      expect(add(70, 80)).toBe(100);
    });
  });
```

## 閾値と例外処理
- 例外をスローする実装
add関数に０〜１００までの数値の見受けつけるという仕様を加えたとして
```
export function add(a: number, b: number) {
    if(a<0||a>100){
        throw new Error("入力値は0~100の間で入力してください")
    }

    if(b<0||b>100){
        throw new Error("入力値は0~100の間で入力してください")
    }

  const sum = a + b;
  if (sum > 100) {
    return 100;
  }
  return sum;
}
```
となる。

テストのexpectの引数は値ではなく、例外が発生する関数を与える。
```
expect(例外スローが想定される関数).toThrow();
```

「例外スローが想定される関数」はアロー関数でラップする
```
// 正しくない書き方
expect(add(-1,110).toThrow());

//正しい書き方
expect(()=>add(-10,110) .toThrow());
```

## エラーメッセージによる詳細な検証
```
expect(()=>add(-10,110) .toThrow("入力値は0~100の間で入力してください"));
```
このテストで意図通りエラーメッセージがスローされるかを検証できる。

## 用途別のマッチャー
### 真偽値の検証
.toBeTruthy() 
.toBeFalsy()

null,undefinedも.toBeFalsy()を使えるがより詳細なマッチャーとして
.toBeNull()
.toBeUndefined()
がある。
```
describe("真偽値の検証", () => {
  test("「真の値」の検証", () => {
    expect(1).toBeTruthy();
    expect("1").toBeTruthy();
    expect(true).toBeTruthy();
    expect(0).not.toBeTruthy();
    expect("").not.toBeTruthy();
    expect(false).not.toBeTruthy();
  });
  test("「偽の値」の検証", () => {
    expect(0).toBeFalsy();
    expect("").toBeFalsy();
    expect(false).toBeFalsy();
    expect(1).not.toBeFalsy();
    expect("1").not.toBeFalsy();
    expect(true).not.toBeFalsy();
  });
  test("「null, undefined」の検証", () => {
    expect(null).toBeFalsy();
    expect(undefined).toBeFalsy();
    expect(null).toBeNull();
    expect(undefined).toBeUndefined();
    expect(undefined).not.toBeDefined();
  });
});
```

### 数値の検証
=
.toBe()
.toEqual()

>,>=
.toBeGreaterThan()
.toBeGreaterThanOrEqual()

<,<=
.toBeLessThan()
.toBeLessThanOrEqual()

小数の検証（jsでは小数の計算に誤差が生じてしまうため）
.toBeCloseTo()

```
describe("数値の検証", () => {
  const value = 2 + 2;
  test("検証値 は 期待値 と等しい", () => {
    expect(value).toBe(4);
    expect(value).toEqual(4);
  });
  test("検証値 は 期待値 より大きい", () => {
    expect(value).toBeGreaterThan(3); // 4 > 3
    expect(value).toBeGreaterThanOrEqual(4); // 4 >= 4
  });
  test("検証値 は 期待値 より小さい", () => {
    expect(value).toBeLessThan(5); // 4 < 5
    expect(value).toBeLessThanOrEqual(4); // 4 <= 4
  });
  test("小数計算は正確ではない", () => {
    expect(0.1 + 0.2).not.toBe(0.3);
  });
  test("小数計算の指定桁までを比較する", () => {
    expect(0.1 + 0.2).toBeCloseTo(0.3); // デフォルトは 2桁
    expect(0.1 + 0.2).toBeCloseTo(0.3, 15); //15桁までを検証
    expect(0.1 + 0.2).not.toBeCloseTo(0.3, 16);
  });
});
```

### 文字列の検証
=
.toBe()
.toEqual()

文字数
.toHaveLength()
.not.toHaveLength()

文字列を含む
.toContain()
.not.toContain()

正規表現を含む
.toMatch(/世界/)
.not.toMatch(/さようなら/)

オブジェクトのプロパティに含む
.stringContaining("世界")
.stringMatching(/世界/)

```
describe("文字列の検証", () => {
  const str = "こんにちは世界";
  const obj = { status: 200, message: str };
  test("検証値 は 期待値 と等しい", () => {
    expect(str).toBe("こんにちは世界");
    expect(str).toEqual("こんにちは世界");
  });
  test("toHaveLength", () => {
    expect(str).toHaveLength(7);
    expect(str).not.toHaveLength(8);
  });
  test("toContain", () => {
    expect(str).toContain("世界");
    expect(str).not.toContain("さようなら");
  });
  test("toMatch", () => {
    expect(str).toMatch(/世界/);
    expect(str).not.toMatch(/さようなら/);
  });
  test("stringContaining", () => {
    expect(obj).toEqual({
      status: 200,
      message: expect.stringContaining("世界"),
    });
  });
  test("stringMatching", () => {
    expect(obj).toEqual({
      status: 200,
      message: expect.stringMatching(/世界/),
    });
  });
});
```

### 配列の検証
含む
.toContain("Jest")

要素数
.toHaveLength(5)

要素が含まれている
.toContainEqual(article1)

要素が全て含まれている
.arrayContaining([article1, article3])

```
describe("配列の検証", () => {
  describe("プリミティブ配列", () => {
    const tags = ["Jest", "Storybook", "Playwright", "React", "Next.js"];
    test("toContain", () => {
      expect(tags).toContain("Jest");
      expect(tags).toHaveLength(5);
    });
  });
  describe("オブジェクト配列", () => {
    const article1 = { author: "taro", title: "Testing Next.js" };
    const article2 = { author: "jiro", title: "Storybook play function" };
    const article3 = { author: "hanako", title: "Visual Regression Testing " };
    const articles = [article1, article2, article3];
    test("toContainEqual", () => {
      expect(articles).toContainEqual(article1);
    });
    test("arrayContaining", () => {
      expect(articles).toEqual(expect.arrayContaining([article1, article3]));
    });
  });
});
```

### オブジェクトの検証
部分一致
.toMatchObject({ name: "taroyamada" })
.not.toMatchObject({ gender: "man" })

プロパティが存在するか
.toHaveProperty("name")

オブジェクトにオブジェクトが含まれるか
.objectContaining({ name: "taroyamada" })
.not.objectContaining({ gender: "man" })

```
describe("オブジェクトの検証", () => {
  const author = { name: "taroyamada", age: 38 };
  const article = {
    title: "Testing with Jest",
    author,
  };
  test("toMatchObject", () => {
    expect(author).toMatchObject({ name: "taroyamada", age: 38 });
    expect(author).toMatchObject({ name: "taroyamada" });
    expect(author).not.toMatchObject({ gender: "man" });
  });
  test("toHaveProperty", () => {
    expect(author).toHaveProperty("name");
    expect(author).toHaveProperty("age");
  });
  test("objectContaining", () => {
    expect(article).toEqual({
      title: "Testing with Jest",
      author: expect.objectContaining({ name: "taroyamada" }),
    });
    expect(article).toEqual({
      title: "Testing with Jest",
      author: expect.not.objectContaining({ gender: "man" }),
    });
  });
});
```

### 非同期処理のテスト
テスト対象
```
export function wait(duration: number) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(duration);
    }, duration);
  });
}

export function timeout(duration: number) {
  return new Promise((_, reject) => {
    setTimeout(() => {
      reject(duration);
    }, duration);
  });
}
```

- thenに渡す関数内でアサーションを書く
→Promiseが解決するまでテストの判定を待つ

```
test("指定時間待つと、経過時間をもって resolve される", () => {
    return wait(50).then((duration) => {
    expect(duration).toBe(50);
    });
});
```

- resolvesした際の値を検証
```
test("指定時間待つと、経過時間をもって resolve される", () => {
    return expect(wait(50)).resolves.toBe(50);
});
```

- async/awaitを使う
```
test("指定時間待つと、経過時間をもって resolve される", async () => {
    await expect(wait(50)).resolves.toBe(50);
});
test("指定時間待つと、経過時間をもって resolve される", async () => {
    expect(await wait(50)).toBe(50);
});
```

- rejectを検証
```
test("指定時間待つと、経過時間をもって reject される", () => {
    return timeout(50).catch((duration) => {
    expect(duration).toBe(50);
    });
});
```

```
test("指定時間待つと、経過時間をもって reject される", () => {
    return expect(timeout(50)).rejects.toBe(50);
});

test("指定時間待つと、経過時間をもって reject される", async () => {
    await expect(timeout(50)).rejects.toBe(50);
});
```

```
test("指定時間待つと、経過時間をもって reject される", async () => {
  try {
    await timeout(50); 
  } catch (err) {
    expect(err).toBe(50);
  }
});
```

- 期待通りのテストコードであることを確認する
以下のコードはテストする関数を間違ったため、アサーションに到達しないまま終了（成功）してしまう。
```
test("指定時間待つと、経過時間をもって reject される", async () => {
  try {
    await await(50); // timeout関数のつもりが、wait関数にしてしまった
    // ここで終了してしまい、テストは成功する
  } catch (err) {
    // アサーションは実行されない
    expect(err).toBe(50);
  }
});
```

このようなミスがないようにexpect.assertions()を追記する。
expect.assertions()はアサーションの実行そのものを検証し、引数は実行される回数を渡す。
```
test("指定時間待つと、経過時間をもって reject される", async () => {
  expect.assertions(1);
  try {
    await await(50); 
    // timeout関数のつもりが、wait関数にしてしまった
    // アサーションは実行されないのでテストは失敗
  } catch (err) {
    // アサーションは実行されない
    expect(err).toBe(50);
  }
});
```

# 第4章：モック
データ取得の失敗などを再現するために「モック」が必要になる。


## モックの用語整理

**「スタブ」**
→「代用」を目的としたモック

- 依存コンポーネントの代用品
- 定められた値を返却する
- テスト対象に「入力」を与える

**「スパイ」**
→「記録」を目的とするモック

- 関数やメソッドの呼び出しを記録するオブジェクト
- 呼び出された回数、実行時引数を記録するもの
- テスト対象からあの「出力」を確認するためのもの

例）関数引数のコールバック関数

## モックモジュールを使ったスタブ(関数やライブラリーの置き換え)

Jestではモックモジュールを使用してスタブを適用する

- テスト対象の関数
関数 sayGoodByeは未実装のためエラーを返す
```
export function greet(name: string) {
  return `Hello! ${name}.`;
}

export function sayGoodBye(name: string) {
  throw new Error("未実装");
}
```

- テスト１
テストは成功する。
```
import { greet } from "./greet";

test("挨拶を返す（本来の実装どおり）", () => {
  expect(greet("Taro")).toBe("Hello! Taro.");
});
```

- テスト2
jest.mock("./greet")でモジュールの置き換えが実行され、greetはundefinedを返すようになる。

```
import { greet } from "./greet";

jest.mock("./greet");

test("挨拶を返さない（本来の実装ではない）", () => {
  expect(greet("Taro")).toBe(undefined);
});
```

- テスト３
第2引数に代用の関数を施すことでsayGoodBye関数を置き換えることができる。
```
import { greet, sayGoodBye } from "./greet";

jest.mock("./greet", () => ({
  sayGoodBye: (name: string) => `Good bye, ${name}.`,
}));

test("挨拶が未実装（本来の実装ではない）", () => {
  expect(greet).toBe(undefined);
});

test("さよならを返す（本来の実装ではない）", () => {
  const message = `${sayGoodBye("Taro")} See you.`;
  expect(message).toBe("Good bye, Taro. See you.");
});
```

- テスト４
jest.requireActualを使用することで、.greetの本来の実装をimportできる。
以下はsayGoodBye関数のみを置き換えている。
```
import { greet, sayGoodBye } from "./greet";

jest.mock("./greet", () => ({
  ...jest.requireActual("./greet"),
  sayGoodBye: (name: string) => `Good bye, ${name}.`,
}));

test("挨拶を返す（本来の実装どおり）", () => {
  expect(greet("Taro")).toBe("Hello! Taro.");
});

test("さよならを返す（本来の実装ではない）", () => {
  const message = `${sayGoodBye("Taro")} See you.`;
  expect(message).toBe("Good bye, Taro. See you.");
});
```

- ライブラリの置き換え
以下のように使用するライブラリも置き換えができる
```
jest.mock("next/router",()=>require("next-router-mock"))
```

## Web APIのモック
- テスト対象
getMyProfileをスタブに置き換える
```
export type Profile = {
  id: string;
  name?: string;
  age?: number;
  email: string;
};

export function getMyProfile(): Promise<Profile> {
  return fetch(host("/my/profile")).then(handleResponse);
}
```
```
import { getMyProfile } from "../fetchers";

export async function getGreet() {
  // テストしたいのはここのデータ取得と
  const data = await getMyProfile();
  // 取得したデータをここで連結する処理
  if (!data.name) {
    return `Hello, anonymous user!`;
  }
  return `Hello, ${data.name}!`;
}
```

今回のスタブの実装にjest.spyOnを使用する。

まずは置き換えの宣言を行う
```
import * as Fetchers from "../fetchers";

jest.mock("../fetchers");
```

対象の関数の置き換えをjest.spyOnで行う。
```
jest.spyOn(対象のオブジェクト, 対象の関数名称);
jest.spyOn(Fetchers, "getMyProfile")
```

- データ取得成功を再現するテスト
fetch成功時のテストを行う場合、.mockResolvedValueOnceで指定する
```
// getMyProfile が resolve した時の値を再現
jest.spyOn(Fetchers, "getMyProfile").mockResolvedValueOnce({
  id: "xxxxxxx-123456",
  email: "taroyamada@myapi.testing.com",
  name: "taroyamada",
});
```

- データ取得失敗を再現するテスト
mockRejectedValueOnceで実装する
```
// getMyProfile が reject した時の値を再現
jest.spyOn(Fetchers, "getMyProfile").mockRejectedValueOnce(httpError);
await expect(getGreet()).rejects.toMatchObject({
  err: { message: "internal server error" },
});
```

## Web API モック生成関数
前の節では性的なデータを返すスタブを使用したが、今節ではレスポンスデータを切り替える「モック生成関数」を使用する。

- テスト対象
```
export type Article = {
  id: string;
  createdAt: string;
  tags: string[];
  title: string;
  body: string;
};

export type Articles = {
  articles: Article[];
};

import { getMyArticles } from "../fetchers";

export async function getMyArticleLinksByCategory(category: string) {
  // データを取得する関数
  const data = await getMyArticles();
  // 取得したデータのうち、指定したタグが含まれる記事に絞り込む
  const articles = data.articles.filter((article) =>
    article.tags.includes(category)
  );
  if (!articles.length) {
    // 該当記事がない場合、null を返す
    return null;
  }
  // 該当記事がある場合、一覧向けに加工したデータを返す
  return articles.map((article) => ({
    title: article.title,
    link: `/articles/${article.id}`,
  }));
}
```

**テスト項目**
1. 指定したタグを持つ記事が一件もない場合nullが変える
1. 指定したダグを持つ記事が一件以上ある場合、リンク一覧が返る
1. データ取得に失敗した場合、例外がスローされる

テスト対象はgetMyArticlesでfetchしているが、このレスポンスを再現するデータを準備する。
レスポンスを再現するテスト用データを **フィクスチャー** と呼ぶ。

```
export const getMyArticlesData: Articles = {
  articles: [
    {
      id: "howto-testing-with-typescript",
      createdAt: "2022-07-19T22:38:41.005Z",
      tags: ["testing"],
      title: "TypeScript を使ったテストの書き方",
      body: "テストを書く時、TypeScript を使うことで、テストの保守性が向上します…",
    },
    {
      id: "nextjs-link-component",
      createdAt: "2022-07-19T22:38:41.005Z",
      tags: ["nextjs"],
      title: "Next.js の Link コンポーネント",
      body: "Next.js の画面遷移には、Link コンポーネントを使用します…",
    },
    {
      id: "react-component-testing-with-jest",
      createdAt: "2022-07-19T22:38:41.005Z",
      tags: ["testing", "react"],
      title: "Jest ではじめる React のコンポーネントテスト",
      body: "Jest は単体テストとして、UIコンポーネントのテストが可能です…",
    },
  ],
};
```

フィクスチャーを用いてモック生成関数を使った関数を実装

```
function mockGetMyArticles(status = 200) {
  if (status > 299) {
    return jest
      .spyOn(Fetchers, "getMyArticles")
      .mockRejectedValueOnce(httpError);
  }
  return jest
    .spyOn(Fetchers, "getMyArticles")
    .mockResolvedValueOnce(getMyArticlesData);
}
```

この関数のおかげで.spyOnを逐次実行する必要がなくなる。

```
test("データ取得に成功", async () => {
  mockGetMyArticles();
});

test("データ取得に失敗", async () => {
  mockGetMyArticles(500);
});
```

- データ取得成功を再現するテスト
下記のテストはplaywrightというタグの記事は一件もないのでnullが変えるかを検証する
```
test("指定したタグをもつ記事が一件もない場合、null が返る", async () => {
  mockGetMyArticles();
  const data = await getMyArticleLinksByCategory("playwright");
  expect(data).toBeNull();
});
```

下記のテストはtestingタグを持つ記事がフィクスチャーに存在するため、リンク一覧を返し成功する。
```
test("指定したタグをもつ記事が一件以上ある場合、リンク一覧が返る", async () => {
  mockGetMyArticles();
  const data = await getMyArticleLinksByCategory("testing");
  expect(data).toMatchObject([
    {
      link: "/articles/howto-testing-with-typescript",
      title: "TypeScript を使ったテストの書き方",
    },
    {
      link: "/articles/react-component-testing-with-jest",
      title: "Jest ではじめる React のコンポーネントテスト",
    },
  ]);
});
```

- データ取得失敗を再現するテスト
```
test("データ取得に失敗した場合、reject される", async () => {
  mockGetMyArticles(500);
  await getMyArticleLinksByCategory("testing").catch((err) => {
    expect(err).toMatchObject({
      err: { message: "internal server error" },
    });
  });
});

```

## モック関数を使ったスパイ
スパイ＝テスト対象にどのような入出力が生じたかを記録するオブジェクト

モック関数を利用しスパイを実装する。
jest.fnでモック関数を作成する。

- 実行されたかの検証
.toBeCalledで関すが実行されたかを検証できる。
```
test("モック関数は実行された", () => {
  const mockFn = jest.fn();
  mockFn();
  expect(mockFn).toBeCalled();
});

test("モック関数は実行されていない", () => {
  const mockFn = jest.fn();
  expect(mockFn).not.toBeCalled();
});
```

- 実行されたかの検証
.toHaveBeenCalledTimes(n)でn回実行されたかを検証
```
test("モック関数は実行された回数を記録している", () => {
  const mockFn = jest.fn();
  mockFn();
  expect(mockFn).toHaveBeenCalledTimes(1);
  mockFn();
  expect(mockFn).toHaveBeenCalledTimes(2);
});
```

- 実行時引数の検証
モック関数は関数内で実行することも可能
```
test("モック関数は関数の中でも実行できる", () => {
  const mockFn = jest.fn();
  function greet() {
    mockFn();
  }
  greet();
  expect(mockFn).toHaveBeenCalledTimes(1);
});
```

引数を渡してモック関数を実行すると、それが記録される。
モック関数に引数を渡すと.toHaveBeenCalledWithで引数の検証を行うことができる。
```
test("モック関数は実行時の引数を記録している", () => {
  const mockFn = jest.fn();
  function greet(message: string) {
    mockFn(message);
  }
  greet("hello");
  expect(mockFn).toHaveBeenCalledWith("hello");
});
```

- スパイとしての利用方法
モック関数のスパイの活躍の場＝**テスト対象の引数に関数がある時**

テスト対象
```
export function greet(name: string, callback?: (message: string) => void) {
  callback?.(`Hello! ${name}`);
}
```

テストコード
以下のテストはコールバック関数の引数を検証できる
```
test("モック関数はテスト対象の引数として使用できる", () => {
  const mockFn = jest.fn();
  greet("Jiro", mockFn);
  expect(mockFn).toHaveBeenCalledWith("Hello! Jiro");
});
```

- 実行時引数のオブジェクト検証
文字列以外にもオブジェクトの検証もできる

テスト対象
```
const config = {
  mock: true,
  feature: { spy: true },
};

export function checkConfig(callback?: (payload: object) => void) {
  callback?.(config);
}
```

テストコード
```
test("モック関数は実行時引数のオブジェクト検証ができる", () => {
  const mockFn = jest.fn();
  checkConfig(mockFn);
  expect(mockFn).toHaveBeenCalledWith({
    mock: true,
    feature: { spy: true },
  });
});
```

オブジェクトの一部を検証するにはexpect.objectContainingという補助関数を使用する
```
test("expect.objectContaining による部分検証", () => {
  const mockFn = jest.fn();
  checkConfig(mockFn);
  expect(mockFn).toHaveBeenCalledWith(
    expect.objectContaining({
      feature: { spy: true },
    })
  );
});
```

## WebApiの詳細なモック
入力値を検証した上でレスポンスデータを切り替えるモックの実装

- テスト対象
サーバーサイドのバリデーションを再現した関数。
```
export class ValidationError extends Error { }

export function checkLength(value: string) {
  if (value.length === 0) {
    throw new ValidationError("1文字以上入力してください");
  }
}
```

- モック生成関数を用意する
```
function mockPostMyArticle(input: ArticleInput, status = 200) {
  if (status > 299) {
    return jest
      .spyOn(Fetchers, "postMyArticle")
      .mockRejectedValueOnce(httpError);
  }
  try {
    checkLength(input.title);
    checkLength(input.body);
    return jest
      .spyOn(Fetchers, "postMyArticle")
      .mockResolvedValue({ ...postMyArticleData, ...input });
  } catch (err) {
    return jest
      .spyOn(Fetchers, "postMyArticle")
      .mockRejectedValueOnce(httpError);
  }
}
```

- テストの準備
送信する値を動的に作成するファクトリー関数を作成
```
function inputFactory(input?: Partial<ArticleInput>) {
  return {
    tags: ["testing"],
    title: "TypeScript を使ったテストの書き方",
    body: "テストを書く時、TypeScript を使うことで、テストの保守性が向上します。",
    ...input,
  };
}
```

- バリデーション成功のテスト

```
test("バリデーションに成功した場合、成功レスポンスが返る", async () => {
  // バリデーションに通過する入力値を用意
  const input = inputFactory();
  // 入力値を含んだ成功レスポンスが返るよう、モックを施す
  const mock = mockPostMyArticle(input);
  // テスト対象の関数に、input を与えて実行
  const data = await postMyArticle(input);
  // 取得したデータに、入力内容が含まれているかを検証
  expect(data).toMatchObject(expect.objectContaining(input));
  // モック関数が呼び出されたかを検証
  expect(mock).toHaveBeenCalled();
});
```

- バリデーション失敗のテスト
```
test("バリデーションに失敗した場合、reject される", async () => {
  expect.assertions(2);
  // バリデーションに通過しない入力値を用意
  const input = inputFactory({ title: "", body: "" });
  // 入力値を含んだ成功レスポンスが返るよう、モックを施す
  const mock = mockPostMyArticle(input);
  // バリデーションに通過せず reject されるかを検証
  await postMyArticle(input).catch((err) => {
    // エラーオブジェクトをもって reject されたことを検証
    expect(err).toMatchObject({ err: { message: expect.anything() } });
    // モック関数が呼び出されたことを検証
    expect(mock).toHaveBeenCalled();
  });
});
```
- データ取得失敗のテスト
```
test("データ取得に失敗した場合、reject される", async () => {
  expect.assertions(2);
  // バリデーションに通過する入力値を用意
  const input = inputFactory();
  // 失敗レスポンスが返るようモックを施す
  const mock = mockPostMyArticle(input, 500);
  // reject されるかを検証
  await postMyArticle(input).catch((err) => {
    // エラーオブジェクトをもって reject されたことを検証
    expect(err).toMatchObject({ err: { message: expect.anything() } });
    // モック関数が呼び出されたことを検証
    expect(mock).toHaveBeenCalled();
  });
});
```

## 現在時刻に依存したテスト
- テスト対象
 Date().getHours()ののため、現在時刻に依存している。
```
export function greetByTime() {
  const hour = new Date().getHours();
  if (hour < 12) {
    return "おはよう";
  } else if (hour < 18) {
    return "こんにちは";
  }
  return "こんばんは";
}

```

- 現在時刻を固定
jest.useFakeTimers:Jestに偽のタイマーを使用するように指示
jest.setSystemTime:偽のタイマーで使用される時刻を設定

jest.setRealTime:Jestに本物の時刻を使用するように（元に戻すように）指示

```
import { greetByTime } from ".";

describe("greetByTime(", () => {
  beforeEach(() => {
    jest.useFakeTimers();
  });

  afterEach(() => {
    jest.useRealTimers();
  });

  test("朝は「おはよう」を返す", () => {
    jest.setSystemTime(new Date(2023, 4, 23, 8, 0, 0));
    expect(greetByTime()).toBe("おはよう");
  });

  test("昼は「こんにちは」を返す", () => {
    jest.setSystemTime(new Date(2023, 4, 23, 14, 0, 0));
    expect(greetByTime()).toBe("こんにちは");
  });

  test("夜は「こんばんは」を返す", () => {
    jest.setSystemTime(new Date(2023, 4, 23, 21, 0, 0));
    expect(greetByTime()).toBe("こんばんは");
  });
});

```

※ セットアップと破棄
全テストの前後＝**beforeAll,afterAll**
各テストの前後＝**beforeEach,afterEach**

# UIコンポーネントテスト
## 必要なライブラリ

### DOM API
UIコンポーネントのテストはDOM APIが必要だが Node.jsには用意されていない。
そこで使用するのが **jsdom**
jest-environment-jsdomをインストール

jest.config.tsに指定。
```:jest.config.ts
module.exports = {
  testEnvironment: "jest-environment-jsdom,
};
```

### Testing Library
Testing Library = Uiコンポーネントのテスト用ライブラリ

役割は以下三つ
- UIコンポーネントのレンダリング
- レンダリングした要素から任意の子要素を取得
- レンダリングした要素にインタラクションを与える

@testing-libraly/react を使用する。

### UIコンポーネント用のマッチャー拡張
UIコンポーネントにもJestのマッチャー、アサーションが使用できるがDOMの状態を検証するには不十分のため @testing-libraly-jest-domを使用する。

### ユーザー操作をシュミレートするライブラリ
実際のユーザー操作に近いテストを行える@testing-library/user-eventを追加する。

## テストの実行
- テストの対象
```
type Props = {
  name: string;
  onSubmit?: (event: React.FormEvent<HTMLFormElement>) => void;
};
export const Form = ({ name, onSubmit }: Props) => {
  return (
    <form
      onSubmit={(event) => {
        event.preventDefault();
        onSubmit?.(event);
      }}
    >
      <h2>アカウント情報</h2>
      <p>{name}</p>
      <div>
        <button>編集する</button>
      </div>
    </form>
  );
};
```

- レンダリングのテスト
testing-ribralyのrender関数を使用して、テスト対象のUIコンポーネントをレンダリング。
screen.getByTextで一致した文字列を持つ要素を一つ取得できる。

.toBeInTheDocument()は@testing-libraly-jest-domで拡張されたマッチャーで要素がドキュメントに存在することを検証する。

```
import { render, screen } from "@testing-library/react";
import { Form } from "./Form";

test("名前の表示", () => {
  render(<Form name="taro" />);
  expect(screen.getByText("taro")).toBeInTheDocument();
});
```

拡張アサーションはimportする必要がない。
ルートディレクトリのjest.setup.tsでインポートを行っている。
```:jest.setup.ts
import "@testing-library/jest-dom";
import React from "react";

global.React = React;
```

- 特定のDOM要素をロールで取得
dom要素roleをgetByRole("button")で取得している
```
test("ボタンの表示", () => {
  render(<Form name="taro" />);
  expect(screen.getByRole("button")).toBeInTheDocument();
});
```

- 見出しのアサーション
.getByRole("heading")により<h2>への参照が得られる。
.toHaveTextContent("アカウント情報")で見出しに特定の文字列が含まれるかを検証している。
```
test("見出しの表示", () => {
  render(<Form name="taro" />);
  expect(screen.getByRole("heading")).toHaveTextContent("アカウント情報");
});
```

- イベントハンドラーの呼び出しテスト
イベントハンドラー＝イベントが発生した際に呼び出される関数

onSubmitにモック関数を置換している。
fireEvent.clickでボタンクリックを再現することができ、イベントハンドラーのモック関数が実行されたかを検証している。

```
import { fireEvent, logRoles, render, screen } from "@testing-library/react";

test("ボタンを押下すると、イベントハンドラーが呼ばれる", () => {
  const mockFn = jest.fn();
  render(<Form name="taro" onSubmit={mockFn} />);
  fireEvent.click(screen.getByRole("button"));
  expect(mockFn).toHaveBeenCalled();
});
```